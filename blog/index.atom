<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://preaction.github.io/index.html</id>
    <title>preaction</title>
    <updated>2015-01-21T22:39:28Z</updated>
    <link rel="self" href="http://preaction.github.io/blog/index.atom"/>
    <link rel="alternate" href="http://preaction.github.io/index.html"/>
    <generator version="0.034">Statocles</generator>
    <entry>
        <id>http://preaction.github.io/blog/2015/01/21/managing-sql-data-with-yertl.html</id>
        <title>Managing SQL Data with Yertl</title>
        <link rel="alternate" href="http://preaction.github.io/blog/2015/01/21/managing-sql-data-with-yertl.html" />
        <content type="html"><![CDATA[
            <p>Every week, I work with about a dozen SQL databases. Some are Sybase, some
MySQL, some SQLite. Some have different versions in dev, staging, and
production. All of them need data extracted, transformed, and loaded.</p>

<p>DBI is the clear choice for dealing with SQL databases in Perl, but there are a
dozen lines of Perl code in between me and the operation that I want. Sure,
I've got modules and web applications and ad-hoc commands and scripts that
perform certain individual tasks on my databases, but sometimes those things
don't quite do what I need right now, and I just want something that will let
me execute whatever SQL I can come up with.</p>

<p><a href="http://metacpan.org/pod/ETL::Yertl">Yertl (ETL::Yertl)</a> is a shell-based ETL
framework. It's under development (as is all software), but included already is
a small utility called <a href="http://metacpan.org/pod/ysql">ysql</a> to make dealing
with SQL databases easy.</p>

<p>To use ysql, first we have to configure a database. This saves us from having
to type the full DBI data source name (dbi:mysql:host=dev;database=mydb) every
time. Instead, we can refer to our database by a nice name, like "dev", or
"prod".</p>

<pre><code>$ ysql config dev dbi:SQLite:database.db
</code></pre>

<p>Later, we can update our configuration if we need to:</p>

<pre><code>$ ysql config dev --database=dev.db
</code></pre>

<p>We can examine our configuration as a YAML document:</p>

<pre><code>$ ysql config dev
---
database: dev.db
driver: SQLite
</code></pre>

<p>Let's add a production database as well:</p>

<pre><code>$ ysql config prod --driver=SQLite --database=prod.db
</code></pre>

<p>And now we can check both of our configs:</p>

<pre><code>$ ysql config
---
dev:
  database: dev.db
  driver: SQLite
prod:
  database: prod.db
  driver: SQLite
</code></pre>

<p>Now that we've configured some databases, let's insert some data. First we need
to make some tables:</p>

<pre><code>$ ysql query prod 'CREATE TABLE users ( id INTEGER PRIMARY KEY \
    AUTOINCREMENT, name VARCHAR, email VARCHAR )'
$ ysql query dev 'CREATE TABLE users ( id INTEGER PRIMARY KEY \
    AUTOINCREMENT, name VARCHAR, email VARCHAR )'
</code></pre>

<p>Next let's insert some data:</p>

<pre><code>$ ysql query prod 'INSERT INTO users ( name, email ) \
    VALUES ( "preaction", "preaction@example.com" )'
$ ysql query prod 'INSERT INTO users ( name, email ) \
    VALUES ( "postaction", "postaction@example.com" )'
</code></pre>

<p>Now, let's query for our data:</p>

<pre><code>$ ysql query prod 'SELECT * FROM users'
---
email: preaction@example.com
id: 1
name: preaction
---
email: postaction.example.com
id: 2
name: postaction
</code></pre>

<p>Yertl uses YAML as its default output, but we can easily convert to JSON or CSV
using the <a href="http://metacpan.org/pod/yto">yto utility</a></p>

<pre><code>$ ysql query prod 'SELECT * FROM users' | yto csv
email,id,name
preaction@example.com,1,preaction
postaction@example.com,2,postaction

$ ysql query prod 'SELECT * FROM users' | yto json
{
   "email" : "preaction@example.com",
   "id" : "1",
   "name" : "preaction"
}
{
   "email" : "postaction@example.com",
   "id" : "2",
   "name" : "postaction"
}
</code></pre>

<p>Now, lets say we want to copy our production database to dev for testing. To do
that, Yertl allows us to read YAML from STDIN and execute a query for each YAML
document. Yertl uses a special interpolation syntax (starting with a "$") to
pick parts of the document to fill in the query:</p>

<pre><code>$ ysql query prod 'SELECT * FROM users' |
    ysql query dev 'INSERT INTO users ( id, name, email ) \
        VALUES ( $.id, $.name, $.email )'
</code></pre>

<p>So this will take our users table from prod and write it to dev. '$.id' picks
the "id" field, '$.name' the "name" field, etc...</p>

<p>But all this would be a bear to type over and over again (imagine if we had a
bunch of joins to do). So, ysql allows you to save queries for later use using
the <code>--save &lt;name&gt;</code> option:</p>

<pre><code>$ ysql query prod --save users 'SELECT * FROM users'
$ ysql query dev --save update_users 'UPDATE users SET \
    name=$.name, email=$.email WHERE id=$.id'
</code></pre>

<p>Then we can recall our query by the name we gave to the <code>--save</code> option:</p>

<pre><code>$ ysql query prod users | ysql query dev update_users
</code></pre>

<p>Finally, using yto and <a href="http://metacpan.org/pod/yfrom">yfrom</a>, we can write a
dump of our users to JSON, and then read that database dump back into our
database:</p>

<pre><code>$ ysql query prod users | yto json &gt; users.json
$ yfrom json &lt; users.json | ysql query dev update_users
</code></pre>

<p>So, though Yertl is in its infancy, it can already help with some common
database tasks!</p>

<p>There are lots of <a href="https://github.com/preaction/ETL-Yertl/labels/feature">plans for Yertl, described in the feature's tag on the issue
tracker</a>, so if you've
got common data tasks that you feel should be easier, <a href="https://chat.mibbit.com/?channel=%23yertl&amp;server=irc.perl.org">join me in #yertl on
irc.perl.org</a>.</p>

                <p><a href="http://preaction.github.io/blog/2015/01/21/managing-sql-data-with-yertl.html#section-2">Continue reading...</a></p>
            <p>Tags:
                <a href="/blog/tag/perl/index.html">perl</a>
                <a href="/blog/tag/sql/index.html">sql</a>
                <a href="/blog/tag/etl/index.html">etl</a>
                <a href="/blog/tag/yertl/index.html">yertl</a>
            </p>
        ]]></content>
        <updated>2015-01-21T00:00:00Z</updated>
        <category term="Statocles::Link=HASH(0x7fd1018b4048)" />
        <category term="Statocles::Link=HASH(0x7fd1018b4498)" />
        <category term="Statocles::Link=HASH(0x7fd1018b47b0)" />
        <category term="Statocles::Link=HASH(0x7fd1018b4a68)" />
    </entry>
    <entry>
        <id>http://preaction.github.io/blog/2014/12/23/leaving-crumb-trails-talking-to-myself.html</id>
        <title>Leaving Crumb Trails -- Talking to Myself</title>
        <author><name>preaction</name></author>
        <link rel="alternate" href="http://preaction.github.io/blog/2014/12/23/leaving-crumb-trails-talking-to-myself.html" />
        <content type="html"><![CDATA[
            <p>The past me is another person. Sometimes antagonist, sometimes friend, past me
(postaction?) had ideas, hopes, and dreams and developed some of them into
software that I and others use. Unfortunately, that asshole left bugs all
through the code for me to fix.</p>

<p>I can't blame him. Nobody's perfect, not even idealized/demonized copies of my
past self. But I do have to fix them, and deal with the messes he left.</p>

<p>Lucky for me, while he was writing buggy software, he left extensive notes for
me to use...</p>

                <ul>
                    <li><a href="http://blogs.perl.org/users/preaction/2014/12/leaving-crumb-trails----talking-to-myself.html">
                        Continue reading <em>Leaving Crumb Trails -- Talking to Myself</em> on blogs.perl.org...
                    </a></li>
                    <li><a href="http://preaction.github.io/blog/2014/12/23/leaving-crumb-trails-talking-to-myself.html#section-2">
                        Continue reading on preaction
                    </a></li>
                </ul>
            <p>Tags:
                <a href="/blog/tag/software/index.html">software</a>
            </p>
        ]]></content>
        <updated>2014-12-23T00:00:00Z</updated>
        <category term="Statocles::Link=HASH(0x7fd1018b38d0)" />
    </entry>
    <entry>
        <id>http://preaction.github.io/blog/2014/10/26/managing-boilerplate-with-import-base.html</id>
        <title>Manage Boilerplate with Import::Base</title>
        <author><name>preaction</name></author>
        <link rel="alternate" href="http://preaction.github.io/blog/2014/10/26/managing-boilerplate-with-import-base.html" />
        <content type="html"><![CDATA[
            <p>Boilerplate is everything I hate about programming:</p>

<ul>
<li>Doing the same thing more than once</li>
<li>Leaving clutter in every file</li>
<li>Making it harder to change things in the future</li>
<li>Eventually blindly copying without understanding (cargo-cult programming)</li>
</ul>

<p>In an effort to reduce some of my boilerplate, I wrote
<a href="https://metacpan.org/pod/Import::Base">Import::Base</a>, a module to collect and
import useful bundles of modules, removing the need for long lists of <code>use ...</code>
lines everywhere.</p>

                <ul>
                    <li><a href="http://blogs.perl.org/users/preaction/2014/10/managing-boilerplate-with-importbase.html">
                        Continue reading <em>Manage Boilerplate with Import::Base</em> on blogs.perl.org...
                    </a></li>
                    <li><a href="http://preaction.github.io/blog/2014/10/26/managing-boilerplate-with-import-base.html#section-2">
                        Continue reading on preaction
                    </a></li>
                </ul>
            <p>Tags:
                <a href="/blog/tag/perl/index.html">perl</a>
            </p>
        ]]></content>
        <updated>2014-10-26T00:00:00Z</updated>
        <category term="Statocles::Link=HASH(0x7fd1018b34e0)" />
    </entry>
    <entry>
        <id>http://preaction.github.io/blog/2014/07/19/between-learning-and-doing.html</id>
        <title>Between Learning and Doing</title>
        <author><name>preaction</name></author>
        <link rel="alternate" href="http://preaction.github.io/blog/2014/07/19/between-learning-and-doing.html" />
        <content type="html"><![CDATA[
            <p><img src="/blog/images/ive-made-a-huge-mistake.gif" alt="I've made a huge mistake" /></p>

<p>A long time ago, when I started building my first video game server for
<a href="http://doublecluepon.com">Double Cluepon</a>, my video game company, I did a bad
thing. I looked at the AMF library for Perl and Python and decided that
Python's looked better. I had always meant to learn Python, and this felt like
the perfect opportunity. It had cooperative multitasking (Twisted) and it had
an ORM (SQLAlchemy), so along with the messaging format (PyAMF), I had
everything I needed to build a server for a Flash MMO (later migrated to AIR).</p>

<p>Let me reiterate my mistake: While under time constraints, I chose to learn a
new programming language. I didn't realize my mistake until it was too late.</p>

                <ul>
                    <li><a href="http://blogs.perl.org/users/preaction/2014/07/between-learning-and-doing.html">
                        Continue reading <em>Between Learning and Doing</em> on blogs.perl.org...
                    </a></li>
                    <li><a href="http://preaction.github.io/blog/2014/07/19/between-learning-and-doing.html#section-2">
                        Continue reading on preaction
                    </a></li>
                </ul>
            <p>Tags:
                <a href="/blog/tag/rants/index.html">rants</a>
            </p>
        ]]></content>
        <updated>2014-07-19T00:00:00Z</updated>
        <category term="Statocles::Link=HASH(0x7fd1018b30d8)" />
    </entry>
    <entry>
        <id>http://preaction.github.io/blog/2014/06/29/perlsloc-count-perl-source-lines-with-perl-tidy.html</id>
        <title>perlsloc - Count Perl Source Lines with Perl::Tidy</title>
        <author><name>preaction</name></author>
        <link rel="alternate" href="http://preaction.github.io/blog/2014/06/29/perlsloc-count-perl-source-lines-with-perl-tidy.html" />
        <content type="html"><![CDATA[
            <p>While spending some time putting together my own <a href="https://github.com/preaction/dot-files/blob/master/perltidyrc">perltidyrc
file</a>, I became
intimately familiar with the <a href="https://metacpan.org/pod/distribution/Perl-Tidy/bin/perltidy">Perl::Tidy
documentation</a>.</p>

<p>One day, I decided to find out exactly how much code I was maintaining. Since
perltidy can strip comments and POD, and also normalize the source code to make
a fair measurement, it's a perfect tool for counting Source Lines of Code
(SLOC).</p>

<p>Here's a small shell script using <code>ack</code>, <code>perltidy</code>, <code>xargs</code>, and <code>wc</code> to count
the source lines of code in any number of directories.</p>

<pre><code>ack -f --perl $@ | xargs -L 1 perltidy --noprofile --delete-pod --mbl=0 --standard-output | wc -l
</code></pre>

<p><code>ack -f</code> lists the files that would be searched, and <code>--perl</code> searches Perl
files, so we get ack's heuristics for finding Perl files. <code>xargs -L 1</code> invokes
the following command for every 1 line of input. The <code>perltidy</code> command strips
the pod and tightens up the whitespace and writes the result to stdout, which
<code>wc -l</code> will then count, line by line.</p>

<p>So, as an example, the current <a href="http://metacpan.org/release/Statocles">Statocles</a> release
has 50% more test lines than source lines:</p>

<pre><code>» perlsloc lib bin
    1034
» perlsloc t
    1633
</code></pre>

                <ul>
                    <li><a href="http://blogs.perl.org/users/preaction/2014/06/perlsloc---count-perl-source-lines-with-perltidy.html">
                        Continue reading <em>perlsloc - Count Perl Source Lines with Perl::Tidy</em> on blogs.perl.org...
                    </a></li>
                    <li><a href="http://preaction.github.io/blog/2014/06/29/perlsloc-count-perl-source-lines-with-perl-tidy.html#section-2">
                        Continue reading on preaction
                    </a></li>
                </ul>
            <p>Tags:
                <a href="/blog/tag/scripts/index.html">scripts</a>
            </p>
        ]]></content>
        <updated>2014-06-29T00:00:00Z</updated>
        <category term="Statocles::Link=HASH(0x7fd1018b1d08)" />
    </entry>
</feed>

