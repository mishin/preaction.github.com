<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://preaction.github.io</id>
    <title>preaction</title>
    <updated>2015-03-08T23:54:05Z</updated>
    <link rel="self" href="http://preaction.github.io/blog/index.atom"/>
    <link rel="alternate" href="http://preaction.github.io"/>
    <generator version="0.041">Statocles</generator>
    <entry>
        <id>http://preaction.github.io/blog/2015/03/08/consuming-chaos</id>
        <title>Consuming Chaos</title>
        <link rel="alternate" href="http://preaction.github.io/blog/2015/03/08/consuming-chaos" />
        <content type="html"><![CDATA[
            <p><img src="/images/blog/chaos.jpg" style="width: 40%" class="u-pull-left"/></p>

<p>For what seems hours, you scan the board. The colors are sharp against the
simple background. Some movement catches your eye, but it doesn't feel right,
so you ignore it. Time stretches on.</p>

<p>There! The perfect move. Leaving the perfect next move. A quick flick. A match.
The pieces fall into place. Another match. Another. Another. A special piece.
Another special piece. It fires, triggering more. Chaos consumes.</p>

<p>The board is in ruins. Your carefully planned next move is lost in the
destruction. You're back to scanning the board to try to find where you belong
in this new world.</p>

<p>Is this a game, or is it your development strategy?</p>

<p>Software development is chaos. Either you work to managing chaos, consuming it,
or it works on consuming you. There are too many possibilities, too much input,
to brute-force your way to completion (how much software do you know of that
can be considered complete?).</p>

<p>In the face of these possibilities, a rigid development plan will fail. Vague
goals are better. Goals written in terms of a problem are best. Problems don't
change, once you find their roots.</p>

<p>I didn't know this post was going to be about Agile, but there it is.</p>

<p>Exact is for computers. We are not computers. We are human. We are chaos.</p>

                <p><a href="http://preaction.github.io/blog/2015/03/08/consuming-chaos#section-2">Continue reading...</a></p>
            <p>Tags:
                <a href="/blog/tag/software">software</a>
            </p>
        ]]></content>
        <updated>2015-03-08T00:00:00Z</updated>
        <category term="software" />
    </entry>
    <entry>
        <id>http://preaction.github.io/blog/2015/03/02/announcing-statocles</id>
        <title>Announcing Statocles</title>
        <link rel="alternate" href="http://preaction.github.io/blog/2015/03/02/announcing-statocles" />
        <content type="html"><![CDATA[
            <p><a href="http://staticsitegenerators.net">Static site generators</a> are popular these
days. For small sites, the ability to quickly author content using simple tools
is key. The ability to use lower-cost (even free) hosting, often without any
dynamic capabilities, is good for trying to maintain a budget. For larger
sites, the ability to serve content quickly and cheaply is beneficial, and
since most pages are read far more often than they are written, generating a
full web page to store on the filesystem can improve performance (and lower
costs).</p>

<p>For me, I like the convenience of using <a href="http://pages.github.com">Github Pages</a>
to host project-oriented websites. The project itself is already on Github, so
why not keep the website closely tied to it so it doesn't get out-of-date? For
an organization like <a href="http://chicago.pm.org">the Chicago Perl Mongers</a>, Github
can even host custom domains, allowing easy collaboration on websites.</p>

<p>It's through the Chicago.PM website that I was introduced to Octopress, a
blogging engine built on Jekyll. It's through using Octopress that I decided to
write my own static site generator,
<a href="http://preaction.github.io/Statocles">Statocles</a>.</p>

                <p><a href="http://preaction.github.io/blog/2015/03/02/announcing-statocles#section-2">Continue reading...</a></p>
            <p>Tags:
                <a href="/blog/tag/perl">perl</a>
                <a href="/blog/tag/statocles">statocles</a>
            </p>
        ]]></content>
        <updated>2015-03-02T00:00:00Z</updated>
        <category term="perl" />
        <category term="statocles" />
    </entry>
    <entry>
        <id>http://preaction.github.io/blog/2015/02/13/mojolicious-triumphs-over-legacy-code.html</id>
        <title>Mojolicious Triumphs Over Legacy Code</title>
        <link rel="alternate" href="http://preaction.github.io/blog/2015/02/13/mojolicious-triumphs-over-legacy-code.html" />
        <content type="html"><![CDATA[
            <p>I got a text at 8:00am:</p>

<blockquote>
  <p>"Hey, can you jump on a conference call?"</p>
</blockquote>

<p>Groggy and disoriented, I blearily type the conference line and enter my
passcode, followed by the pound or hash sign. At the tone, I would be the 6th
person to enter the conference. Tone.</p>

<blockquote>
  <p>"The app is down, and trading has stopped."</p>
</blockquote>

                <p><a href="http://preaction.github.io/blog/2015/02/13/mojolicious-triumphs-over-legacy-code.html#section-2">Continue reading...</a></p>
            <p>Tags:
                <a href="/blog/tag/mojolicious">mojolicious</a>
                <a href="/blog/tag/perl">perl</a>
            </p>
        ]]></content>
        <updated>2015-02-13T00:00:00Z</updated>
        <category term="mojolicious" />
        <category term="perl" />
    </entry>
    <entry>
        <id>http://preaction.github.io/blog/2015/01/21/managing-sql-data-with-yertl.html</id>
        <title>Managing SQL Data with Yertl</title>
        <link rel="alternate" href="http://preaction.github.io/blog/2015/01/21/managing-sql-data-with-yertl.html" />
        <content type="html"><![CDATA[
            <p><a href="http://blogs.perl.org/users/preaction/2015/01/managing-sql-data-with-yertl.html">Originally posted on blogs.perl.org -- Managing SQL Data with
Yertl</a></p>

<p>Every week, I work with about a dozen SQL databases. Some are Sybase, some
MySQL, some SQLite. Some have different versions in dev, staging, and
production. All of them need data extracted, transformed, and loaded.</p>

<p>DBI is the clear choice for dealing with SQL databases in Perl, but there are a
dozen lines of Perl code in between me and the operation that I want. Sure,
I've got modules and web applications and ad-hoc commands and scripts that
perform certain individual tasks on my databases, but sometimes those things
don't quite do what I need right now, and I just want something that will let
me execute whatever SQL I can come up with.</p>

<p><a href="http://metacpan.org/pod/ETL::Yertl">Yertl (ETL::Yertl)</a> is a shell-based ETL
framework. It's under development (as is all software), but included already is
a small utility called <a href="http://metacpan.org/pod/ysql">ysql</a> to make dealing
with SQL databases easy.</p>

                <p><a href="http://preaction.github.io/blog/2015/01/21/managing-sql-data-with-yertl.html#section-2">Continue reading...</a></p>
            <p>Tags:
                <a href="/blog/tag/perl">perl</a>
                <a href="/blog/tag/sql">sql</a>
                <a href="/blog/tag/etl">etl</a>
                <a href="/blog/tag/yertl">yertl</a>
            </p>
        ]]></content>
        <updated>2015-01-21T00:00:00Z</updated>
        <category term="perl" />
        <category term="sql" />
        <category term="etl" />
        <category term="yertl" />
    </entry>
    <entry>
        <id>http://preaction.github.io/blog/2014/12/23/leaving-crumb-trails-talking-to-myself.html</id>
        <title>Leaving Crumb Trails -- Talking to Myself</title>
        <author><name>preaction</name></author>
        <link rel="alternate" href="http://preaction.github.io/blog/2014/12/23/leaving-crumb-trails-talking-to-myself.html" />
        <content type="html"><![CDATA[
            <p>The past me is another person. Sometimes antagonist, sometimes friend, past me
(postaction?) had ideas, hopes, and dreams and developed some of them into
software that I and others use. Unfortunately, that asshole left bugs all
through the code for me to fix.</p>

<p>I can't blame him. Nobody's perfect, not even idealized/demonized copies of my
past self. But I do have to fix them, and deal with the messes he left.</p>

<p>Lucky for me, while he was writing buggy software, he left extensive notes for
me to use...</p>

                <ul>
                    <li><a href="http://blogs.perl.org/users/preaction/2014/12/leaving-crumb-trails----talking-to-myself.html">
                        Continue reading <em>Leaving Crumb Trails -- Talking to Myself</em> on blogs.perl.org...
                    </a></li>
                    <li><a href="http://preaction.github.io/blog/2014/12/23/leaving-crumb-trails-talking-to-myself.html#section-2">
                        Continue reading on preaction
                    </a></li>
                </ul>
            <p>Tags:
                <a href="/blog/tag/software">software</a>
            </p>
        ]]></content>
        <updated>2014-12-23T00:00:00Z</updated>
        <category term="software" />
    </entry>
</feed>

