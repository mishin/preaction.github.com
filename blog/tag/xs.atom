<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://preaction.github.io/blog/tag/xs/index.html</id>
    <title>Doug Bell</title>
    <updated>2014-06-22T00:02:07Z</updated>
    <link rel="self" href="http://preaction.github.io/blog/tag/xs.atom"/>
    <link rel="alternate" href="http://preaction.github.io/blog/tag/xs/index.html"/>
    <generator version="0.013">Statocles</generator>
    <entry>
        <id>/blog/2012/03/20/adventures-in-debugging-c-xs-2-debugging-boogaloo.html</id>
        <title>Adventures in Debugging C/XS 2: Debugging Boogaloo</title>
        <author><name>preaction</name></author>
        <link rel="alternate" href="http://preaction.github.io/blog/2012/03/20/adventures-in-debugging-c-xs-2-debugging-boogaloo.html" />
        <content><![CDATA[
            <p>... or "Ask Not To Whom The Pointer Points, It Points To Thee."</p>

<p>TL;DR: A pointer is not a reference. A pointer knows nothing about the data
being pointed to. Returning multiple values requires actual work.</p>

<p>Everything went wrong when I wanted a string with a <code>NUL</code> character inside it.
C strings are not Perl scalars, they don't know how long they are. So to mark
the end of a string, C uses the <code>NUL</code> character, <code>\0</code>. The <code>strcpy</code> function will
copy to your destination until the first <code>\0</code> from your source. When you want to
have a string with a <code>\0</code> inside of it that does not mark the end of the string,
you need to know exactly how long the string is. This is not difficult to do,
but you also have to return that length from the function that creates your
string.</p>

<p>C functions do not have more than one return value.</p>

<pre><code>(char* buffer, int bufferSize) = get_string_with_nuls();
// You thought it could be that easy?
</code></pre>

<p>So in order for your function to result in more than one value, you have to
pass in references to be used to fill in with actual values.</p>

<pre><code>char* buffer;
int bufferSize = get_string_with_nuls( buffer );
// C programmers will already know what I did wrong here
</code></pre>

<p>Thinking like a Perl programmer, I thought I could just pass in the pointer to
the function and the function could fill it with data. Two problems:</p>

<ol>
<li>I passed in the pointer itself, not a reference to the pointer: <code>&amp;buffer</code></li>
<li>I did not initialize the pointer to anything.</li>
</ol>

<p>A more correct way would be:</p>

<pre><code>char* buffer = malloc( 128 * sizeof( char ) );
int bufferSize = get_string_with_nuls( &amp;buffer );
</code></pre>

<p>But this suffers from another problem: I have to know beforehand how big my
string is going to be and allocate that much memory beforehand.</p>

<p>The way I ended up succeeding was:</p>

<pre><code>int bufferSize;
char* buffer = get_string_with_nuls( &amp;bufferSize );
</code></pre>

<p>This way, <code>get_string_with_nuls</code> can handle the <code>malloc</code> with exactly the correct
size and give it to me. I don't have to guess at a size beforehand.</p>

<p>Of course, a struct could do this better, or since I'm actually in C++, an
object. I'll be planning a new API as soon as I confirm this one actually
works and has proper tests (written in Perl, of course).</p>

        ]]></content>
        <updated>
            2012-03-20T00:00:00Z
        </updated>
        <category term="ARRAY(0x7fc972ea4438)" />
    </entry>
    <entry>
        <id>/blog/2011/11/16/adventures-in-debugging-c-xs.html</id>
        <title>Adventures in Debugging C/XS</title>
        <author><name>preaction</name></author>
        <link rel="alternate" href="http://preaction.github.io/blog/2011/11/16/adventures-in-debugging-c-xs.html" />
        <content><![CDATA[
            <p>... or Why A Good Perl Developer Is Not Automatically A Good C Developer, the
Story of C Programming via Google.</p>

<p>My tests failed, but only sometimes. I was building an XS module to interface
with a C wrapper around a C++ library (wrapper unnecessary? probably). <code>make
test</code> was failing with exit code 11. Some quick searching revealed that I had
an intermittent segfault. Calling a function <code>as_xml</code> would fail with a SEGV in
<code>strlen()</code>. This only happened in perl after <code>as_xml</code> when perl was making a SV
out of the return value. This also only mainly happened during <code>make test</code>.
Doing <code>prove</code> myself would succeed 19 times out of 20, where make test would
fail 19 times out of 20. Worse, my C test program would never fail at all.</p>

<hr />

<p>I changed everything I could think of: Using a debugging perl and keeping debug
symbols in my C library and XS module made the failures happen less frequently
(making debugging ever more frustrating). perlbrew was a big help here, letting
me switch between different versions of perl, debugging perl, threaded perl,
and combinations thereof.</p>

<p>After playing with GDB (once again succeeding 19 times out of 20), I gave up
and searched the web. I found <a href="http://bit.ly/vwnMbb">the same mailing list
thread</a> multiple times, and read it multiple times, not
coming up with anything that was relevant to my situation.</p>

<p>Until I read the thread again after another frustrating half-hour with GDB: I
had forgotten to put a prototype in the .h file, causing the char* pointer
being returned to be treated as an int. On my 64-bit system, this causes
segfaults. The compiler was warning me of this, "<tt>warning: initialization
makes pointer from integer without a cast</tt>", but I didn't understand the
warning (and the web was not helpful on that one).</p>

<p>Adding the function prototype to the C wrapper header and recompiling fixed the
problem.</p>

<p>And that is why I need to learn a lot more about C. Function prototypes?
Header files? Why are those necessary (I'm asking rhetorically, of course)?
Heap and stack? Might as well be herp and derp.</p>

<p>Lesson reinforced: Depth of knowledge does not equal breadth of knowledge.</p>

<p>Also, having IRC at work might have saved me a few hours of hassle.</p>

        ]]></content>
        <updated>
            2011-11-16T00:00:00Z
        </updated>
        <category term="ARRAY(0x7fc972eb1f80)" />
    </entry>
</rss>

