<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://preaction.github.io/index.html</id>
    <title>preaction</title>
    <updated>2015-01-08T00:25:14Z</updated>
    <link rel="self" href="http://preaction.github.io/blog/index.atom"/>
    <link rel="alternate" href="http://preaction.github.io/index.html"/>
    <generator version="0.033">Statocles</generator>
    <entry>
        <id>http://preaction.github.io/blog/2014/12/23/leaving-crumb-trails-talking-to-myself.html</id>
        <title>Leaving Crumb Trails -- Talking to Myself</title>
        <author><name>preaction</name></author>
        <link rel="alternate" href="http://preaction.github.io/blog/2014/12/23/leaving-crumb-trails-talking-to-myself.html" />
        <content type="html"><![CDATA[
            <p>The past me is another person. Sometimes antagonist, sometimes friend, past me
(postaction?) had ideas, hopes, and dreams and developed some of them into
software that I and others use. Unfortunately, that asshole left bugs all
through the code for me to fix.</p>

<p>I can't blame him. Nobody's perfect, not even idealized/demonized copies of my
past self. But I do have to fix them, and deal with the messes he left.</p>

<p>Lucky for me, while he was writing buggy software, he left extensive notes for
me to use...</p>

                <ul>
                    <li><a href="http://blogs.perl.org/users/preaction/2014/12/leaving-crumb-trails----talking-to-myself.html">
                        Continue reading <em>Leaving Crumb Trails -- Talking to Myself</em> on blogs.perl.org...
                    </a></li>
                    <li><a href="http://preaction.github.io/blog/2014/12/23/leaving-crumb-trails-talking-to-myself.html#section-2">
                        Continue reading on preaction
                    </a></li>
                </ul>
            <p>Tags:
                <a href="/blog/tag/software/index.html">software</a>
            </p>
        ]]></content>
        <updated>2014-12-23T00:00:00Z</updated>
        <category term="ARRAY(0x7fe5477c60a0)" />
    </entry>
    <entry>
        <id>http://preaction.github.io/blog/2014/10/26/managing-boilerplate-with-import-base.html</id>
        <title>Manage Boilerplate with Import::Base</title>
        <author><name>preaction</name></author>
        <link rel="alternate" href="http://preaction.github.io/blog/2014/10/26/managing-boilerplate-with-import-base.html" />
        <content type="html"><![CDATA[
            <p>Boilerplate is everything I hate about programming:</p>

<ul>
<li>Doing the same thing more than once</li>
<li>Leaving clutter in every file</li>
<li>Making it harder to change things in the future</li>
<li>Eventually blindly copying without understanding (cargo-cult programming)</li>
</ul>

<p>In an effort to reduce some of my boilerplate, I wrote
<a href="https://metacpan.org/pod/Import::Base">Import::Base</a>, a module to collect and
import useful bundles of modules, removing the need for long lists of <code>use ...</code>
lines everywhere.</p>

                <ul>
                    <li><a href="http://blogs.perl.org/users/preaction/2014/10/managing-boilerplate-with-importbase.html">
                        Continue reading <em>Manage Boilerplate with Import::Base</em> on blogs.perl.org...
                    </a></li>
                    <li><a href="http://preaction.github.io/blog/2014/10/26/managing-boilerplate-with-import-base.html#section-2">
                        Continue reading on preaction
                    </a></li>
                </ul>
            <p>Tags:
                <a href="/blog/tag/perl/index.html">perl</a>
            </p>
        ]]></content>
        <updated>2014-10-26T00:00:00Z</updated>
        <category term="ARRAY(0x7fe5477c7b30)" />
    </entry>
    <entry>
        <id>http://preaction.github.io/blog/2014/07/19/between-learning-and-doing.html</id>
        <title>Between Learning and Doing</title>
        <author><name>preaction</name></author>
        <link rel="alternate" href="http://preaction.github.io/blog/2014/07/19/between-learning-and-doing.html" />
        <content type="html"><![CDATA[
            <p><img src="/blog/images/ive-made-a-huge-mistake.gif" alt="I've made a huge mistake" /></p>

<p>A long time ago, when I started building my first video game server for
<a href="http://doublecluepon.com">Double Cluepon</a>, my video game company, I did a bad
thing. I looked at the AMF library for Perl and Python and decided that
Python's looked better. I had always meant to learn Python, and this felt like
the perfect opportunity. It had cooperative multitasking (Twisted) and it had
an ORM (SQLAlchemy), so along with the messaging format (PyAMF), I had
everything I needed to build a server for a Flash MMO (later migrated to AIR).</p>

<p>Let me reiterate my mistake: While under time constraints, I chose to learn a
new programming language. I didn't realize my mistake until it was too late.</p>

                <ul>
                    <li><a href="http://blogs.perl.org/users/preaction/2014/07/between-learning-and-doing.html">
                        Continue reading <em>Between Learning and Doing</em> on blogs.perl.org...
                    </a></li>
                    <li><a href="http://preaction.github.io/blog/2014/07/19/between-learning-and-doing.html#section-2">
                        Continue reading on preaction
                    </a></li>
                </ul>
            <p>Tags:
                <a href="/blog/tag/rants/index.html">rants</a>
            </p>
        ]]></content>
        <updated>2014-07-19T00:00:00Z</updated>
        <category term="ARRAY(0x7fe5477abc40)" />
    </entry>
    <entry>
        <id>http://preaction.github.io/blog/2014/06/29/perlsloc-count-perl-source-lines-with-perl-tidy.html</id>
        <title>perlsloc - Count Perl Source Lines with Perl::Tidy</title>
        <author><name>preaction</name></author>
        <link rel="alternate" href="http://preaction.github.io/blog/2014/06/29/perlsloc-count-perl-source-lines-with-perl-tidy.html" />
        <content type="html"><![CDATA[
            <p>While spending some time putting together my own <a href="https://github.com/preaction/dot-files/blob/master/perltidyrc">perltidyrc
file</a>, I became
intimately familiar with the <a href="https://metacpan.org/pod/distribution/Perl-Tidy/bin/perltidy">Perl::Tidy
documentation</a>.</p>

<p>One day, I decided to find out exactly how much code I was maintaining. Since
perltidy can strip comments and POD, and also normalize the source code to make
a fair measurement, it's a perfect tool for counting Source Lines of Code
(SLOC).</p>

<p>Here's a small shell script using <code>ack</code>, <code>perltidy</code>, <code>xargs</code>, and <code>wc</code> to count
the source lines of code in any number of directories.</p>

<pre><code>ack -f --perl $@ | xargs -L 1 perltidy --noprofile --delete-pod --mbl=0 --standard-output | wc -l
</code></pre>

<p><code>ack -f</code> lists the files that would be searched, and <code>--perl</code> searches Perl
files, so we get ack's heuristics for finding Perl files. <code>xargs -L 1</code> invokes
the following command for every 1 line of input. The <code>perltidy</code> command strips
the pod and tightens up the whitespace and writes the result to stdout, which
<code>wc -l</code> will then count, line by line.</p>

<p>So, as an example, the current <a href="http://metacpan.org/release/Statocles">Statocles</a> release
has 50% more test lines than source lines:</p>

<pre><code>» perlsloc lib bin
    1034
» perlsloc t
    1633
</code></pre>

                <ul>
                    <li><a href="http://blogs.perl.org/users/preaction/2014/06/perlsloc---count-perl-source-lines-with-perltidy.html">
                        Continue reading <em>perlsloc - Count Perl Source Lines with Perl::Tidy</em> on blogs.perl.org...
                    </a></li>
                    <li><a href="http://preaction.github.io/blog/2014/06/29/perlsloc-count-perl-source-lines-with-perl-tidy.html#section-2">
                        Continue reading on preaction
                    </a></li>
                </ul>
            <p>Tags:
                <a href="/blog/tag/scripts/index.html">scripts</a>
            </p>
        ]]></content>
        <updated>2014-06-29T00:00:00Z</updated>
        <category term="ARRAY(0x7fe5477bf5a0)" />
    </entry>
    <entry>
        <id>http://preaction.github.io/blog/2014/06/14/conflict-resolution-local--lib-and-gits-perl.html</id>
        <title>Conflict Resolution: local::lib and git's Perl</title>
        <author><name>preaction</name></author>
        <link rel="alternate" href="http://preaction.github.io/blog/2014/06/14/conflict-resolution-local--lib-and-gits-perl.html" />
        <content type="html"><![CDATA[
            <p>I ran into a frustrating problem the other day:</p>

<pre><code>$ git add -i
/usr/bin/perl: symbol lookup error: ~/perl5/lib/perl5/x86_64-linux-thread-multi/auto/List/Util/Util.so:
undefined symbol: Perl_xs_apiversion_bootcheck
fatal: 'add--interactive' appears to be a git command, but we were not
able to execute it. Maybe git-add--interactive is broken?
</code></pre>

                <ul>
                    <li><a href="http://blogs.perl.org/users/preaction/2014/06/conflict-resolution-locallib-and-gits-perl.html">
                        Continue reading <em>Conflict Resolution: local::lib and git's Perl</em> on blogs.perl.org...
                    </a></li>
                    <li><a href="http://preaction.github.io/blog/2014/06/14/conflict-resolution-local--lib-and-gits-perl.html#section-2">
                        Continue reading on preaction
                    </a></li>
                </ul>
            <p>Tags:
                <a href="/blog/tag/perl/index.html">perl</a>
                <a href="/blog/tag/git/index.html">git</a>
            </p>
        ]]></content>
        <updated>2014-06-14T00:00:00Z</updated>
        <category term="ARRAY(0x7fe5477beb50)" />
    </entry>
</feed>

