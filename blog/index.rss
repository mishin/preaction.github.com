<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Doug Bell</title>
        <link>http://preaction.github.io/index.html</link>
        <atom:link href="http://preaction.github.io/blog/index.rss" rel="self" type="application/rss+xml" />
        <description>Blog feed of Doug Bell</description>
        <generator>Statocles 0.014</generator>
        <item>
            <title>Conflict Resolution: local::lib and git's Perl</title>
            <link>http://preaction.github.io/blog/2014/06/14/conflict-resolution-local--lib-and-gits-perl.html</link>
            <guid>http://preaction.github.io/blog/2014/06/14/conflict-resolution-local--lib-and-gits-perl.html</guid>
            <description><![CDATA[
                <p>I ran into a frustrating problem the other day:</p>

<pre><code>$ git add -i
/usr/bin/perl: symbol lookup error: ~/perl5/lib/perl5/x86_64-linux-thread-multi/auto/List/Util/Util.so:
undefined symbol: Perl_xs_apiversion_bootcheck
fatal: 'add--interactive' appears to be a git command, but we were not
able to execute it. Maybe git-add--interactive is broken?
</code></pre>

<p>I've seen this error message from Perl a lot. It basically means that I'm
trying to load an XS module compiled for a different version of Perl. Since
<code>git</code> is directly trying to run <code>/usr/bin/perl</code> (5.10.1) as opposed to the
<code>perlbrew</code> Perl I have installed (5.16.3), the error comes as no surprise:
<code>PERL5LIB</code> is checked before Perl's built-in libraries. So if you have a
<code>local::lib</code> (which adds its directories to <code>PERL5LIB</code>) and try to use those
modules in a different Perl, things may not work as you expected.</p>

<p>What is more surprising is that Git explicitly uses <code>/usr/bin/perl</code> in the
first place. Some Google-fu brought up a <a href="http://article.gmane.org/gmane.comp.version-control.git/147462">thread on the Git mailing list about
changing to <code>#!/usr/bin/env
perl</code></a>, but it
appears this was rejected. According to another post in that thread, <a href="http://article.gmane.org/gmane.comp.version-control.git/147475">it is
possible to set PERL_PATH when running <code>make</code> on
Git</a>, but that
did not seem to work for me.</p>

<p>But the Git Perl scripts all seem to have one thing in common: They all add the
paths in the <code>GITPERLLIB</code> environment variable to the front of <code>@INC</code> as
the first thing they do. <code>GITPERLLIB</code> is treated as a <code>:</code>-delimited list of
directories, like <code>PERL5LIB</code>. So if we fill in <code>GITPERLLIB</code> with the right
directories, we can ensure that the right <code>List::Util</code> version is found
first.</p>

<p>The right directories are part of Perl's <code>Config</code>. This configuration is
available to us in Perl scripts through the <code>Config</code> module which provides a
<code>%Config</code> hash.  There are three "layers" of Perl library paths, "core",
"vendor", and "site", configured in the following Config keys:</p>

<ul>
<li>core    => 'archlib', 'privlib'</li>
<li>vendor  => 'vendorarch', 'vendorlib'</li>
<li>site    => 'sitearch', 'sitelib'</li>
</ul>

<p>The "core" libraries are just that, the core Perl 5 libraries. The "vendor"
libraries are additional libraries that your vendor may have provided in their
Perl distribution. The "site" libraries are the CPAN libraries you've
downloaded and installed via the <code>cpan</code> client (unless you're using local::lib,
which overrides the install directories).</p>

<p>Armed with these Config keys, we can make a <code>GITPERLLIB</code> that overrides our local::lib
directories. So now, in my <code>.zshrc</code>, I have:</p>

<pre><code># Fix git perl scripts in case of local::lib
# If we install modules for a different arch in local::lib, we'll get some problems
if [[ -x /usr/bin/perl ]]; then
    export GITPERLLIB=`/usr/bin/perl -MConfig -e'print join ":", grep { $_ } map { $Config{$_} } qw( sitearch sitelib vendorarch vendorlib archlib privlib )'`
fi
</code></pre>

<p>Now I can do my proper <code>git add --interactive</code> again!</p>

            ]]></description>
            <pubDate>
                Sat, 14 Jun 2014 00:00:00 -0600
            </pubDate>
        </item>
        <item>
            <title>Chicago.PM New Website! New Meetup URL! New Presentations Project!</title>
            <link>http://preaction.github.io/blog/2013/06/13/chicago.pm-new-website-new-meetup-url-new-presentations-project.html</link>
            <guid>http://preaction.github.io/blog/2013/06/13/chicago.pm-new-website-new-meetup-url-new-presentations-project.html</guid>
            <description><![CDATA[
                <p>Lots of news for the Chicago.PM group! We've got a <a href="http://chicago.pm.org">new Chicago.PM
website</a>, powered by <a href="http://github.com">Github</a>, up at
<a href="http://chicago.pm.org">http://chicago.pm.org</a>. The website is completely
editable via Github using the <a href="http://octopress.org">Octopress</a> system. We hope
to start sharing resources about Perl on our website, increasing the exposure
of the good tutorials and learning sites.</p>

                <p><a href="http://preaction.github.io/blog/2013/06/13/chicago.pm-new-website-new-meetup-url-new-presentations-project.html#section-2">Continue reading...</a></p>
            ]]></description>
            <pubDate>
                Thu, 13 Jun 2013 00:00:00 -0600
            </pubDate>
        </item>
        <item>
            <title>Chicago.PM - Beyond grep - Expanding the Programmer Toolset</title>
            <link>http://preaction.github.io/blog/2013/05/01/chicago.pm-beyond-grep-expanding-the-programmer-toolset.html</link>
            <guid>http://preaction.github.io/blog/2013/05/01/chicago.pm-beyond-grep-expanding-the-programmer-toolset.html</guid>
            <description><![CDATA[
                <p>Last week, <a href="http://petdance.com">Andy Lester</a> (author of <a href="http://petdance.com/book/">Land the Tech Job You
Love</a>) came to talk about tools to help programmers
work more efficiently and the 2.0 release of his <a href="http://beyondgrep.com">Ack search
tool</a>.</p>

                <p><a href="http://preaction.github.io/blog/2013/05/01/chicago.pm-beyond-grep-expanding-the-programmer-toolset.html#section-2">Continue reading...</a></p>
            ]]></description>
            <pubDate>
                Wed, 01 May 2013 00:00:00 -0600
            </pubDate>
        </item>
        <item>
            <title>I Bless You in the Name of the Stringified Object</title>
            <link>http://preaction.github.io/blog/2013/04/15/i-bless-you-in-the-name-of-the-stringified-object.html</link>
            <guid>http://preaction.github.io/blog/2013/04/15/i-bless-you-in-the-name-of-the-stringified-object.html</guid>
            <description><![CDATA[
                <p>A co-worker came to me today with a curious error message:</p>

<pre><code>use DateTime;
my $date = DateTime-&gt;new( year =&gt; 2013, month =&gt; 4, day =&gt; 15 );
$date-&gt;set_time_zone("Australia/Sydney");
print $date-&gt;today;'
</code></pre>

<p>This code gives the error <code>Can't locate object method "_normalize_nanoseconds"
via package "2013-04-15T00:00:00" at
/usr2/local/perlbrew/perls/perl-5.16.3/lib/site_perl/5.16.3/x86_64-linux-thread-multi/DateTime.pm
line 252.</code></p>

<p>The package "2013-04-15T00:00:00" is the curious part: It looks like a
stringified DateTime, but who could possibly be stringifying a DateTime object
and then using that as a package name?</p>

                <p><a href="http://preaction.github.io/blog/2013/04/15/i-bless-you-in-the-name-of-the-stringified-object.html#section-2">Continue reading...</a></p>
            ]]></description>
            <pubDate>
                Mon, 15 Apr 2013 00:00:00 -0600
            </pubDate>
        </item>
        <item>
            <title>Thoughts while changing the API of a massive framework...</title>
            <link>http://preaction.github.io/blog/2013/04/11/thoughts-while-changing-the-api-of-a-massive-framework.html</link>
            <guid>http://preaction.github.io/blog/2013/04/11/thoughts-while-changing-the-api-of-a-massive-framework.html</guid>
            <description><![CDATA[
                <p>At the Bank we have a home-grown ETL framework that we've been using for quite
some time. We recently completed a total rewrite, but unfortunately we left out
a few changes. Had I gotten those changes in 5 months ago, I would have only
had to break the API of about 10 modules. Today, in order to make those
changes, I have to break the API of 122 modules.</p>

<p>What follows is an account of this ordeal, provided for entertainment value
only. There will be a future post that explains some of the things I did to
make this task surmountable.</p>

                <p><a href="http://preaction.github.io/blog/2013/04/11/thoughts-while-changing-the-api-of-a-massive-framework.html#section-2">Continue reading...</a></p>
            ]]></description>
            <pubDate>
                Thu, 11 Apr 2013 00:00:00 -0600
            </pubDate>
        </item>
    </channel>
</rss>

