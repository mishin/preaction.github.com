<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>preaction</title>
        <link>http://preaction.github.io/blog/tag/software</link>
        <atom:link href="http://preaction.github.io/blog/tag/software.rss" rel="self" type="application/rss+xml" />
        <description>Blog feed of preaction</description>
        <generator>Statocles 0.036</generator>
        <item>
            <title>Leaving Crumb Trails -- Talking to Myself</title>
            <link>http://preaction.github.io/blog/2014/12/23/leaving-crumb-trails-talking-to-myself.html</link>
            <guid>http://preaction.github.io/blog/2014/12/23/leaving-crumb-trails-talking-to-myself.html</guid>
            <description><![CDATA[
                <p>The past me is another person. Sometimes antagonist, sometimes friend, past me
(postaction?) had ideas, hopes, and dreams and developed some of them into
software that I and others use. Unfortunately, that asshole left bugs all
through the code for me to fix.</p>

<p>I can't blame him. Nobody's perfect, not even idealized/demonized copies of my
past self. But I do have to fix them, and deal with the messes he left.</p>

<p>Lucky for me, while he was writing buggy software, he left extensive notes for
me to use...</p>

                    <ul>
                        <li><a href="http://blogs.perl.org/users/preaction/2014/12/leaving-crumb-trails----talking-to-myself.html">
                            Continue reading <em>Leaving Crumb Trails -- Talking to Myself</em> on blogs.perl.org...
                        </a></li>
                        <li><a href="http://preaction.github.io/blog/2014/12/23/leaving-crumb-trails-talking-to-myself.html#section-2">
                            Continue reading on preaction
                        </a></li>
                    </ul>
                <p>Tags:
                    <a href="/blog/tag/software">software</a>
                </p>
            ]]></description>
            <pubDate>
                Tue, 23 Dec 2014 06:57:07 +0000
            </pubDate>
        </item>
        <item>
            <title>Testing is a Feature of Your Service</title>
            <link>http://preaction.github.io/blog/2012/11/04/testing-is-a-feature-of-your-service.html</link>
            <guid>http://preaction.github.io/blog/2012/11/04/testing-is-a-feature-of-your-service.html</guid>
            <description><![CDATA[
                <p>My job at Bank of America consists largely of data collection and storage. To
collect data in Perl, I have to write XS modules to interface with the
vendor-supplied native libraries. Because I want to know my code works, my XS
modules come with robust test suites, testing that everything works correctly.</p>

<p>Since the XS module was intended to be used by other, larger systems, I decided
to help those larger systems test their dependency on my module: I included a
<a href="http://search.cpan.org/perldoc?Test::MockObject">Test::MockObject</a> that mocked
my module's interface. By using my test module, the tests can try some data and
see if their code works.</p>

<p>But the hardest part to test is always the failures. How do they test if the
news service goes down in the middle of a data pull? How about if it goes down
between data pulls but still inside the same process? How do they test if the
user has input an invalid ID for data?</p>

                    <ul>
                        <li><a href="http://blogs.perl.org/users/preaction/2012/11/testing-is-a-feature-of-your-service.html">
                            Continue reading <em>Testing is a Feature of Your Service</em> on blogs.perl.org...
                        </a></li>
                        <li><a href="http://preaction.github.io/blog/2012/11/04/testing-is-a-feature-of-your-service.html#section-2">
                            Continue reading on preaction
                        </a></li>
                    </ul>
                <p>Tags:
                    <a href="/blog/tag/software">software</a>
                </p>
            ]]></description>
            <pubDate>
                Sat, 21 Jun 2014 01:02:00 +0000
            </pubDate>
        </item>
        <item>
            <title>Chicago.PM - Beyond grep - Expanding the Programmer Toolset</title>
            <link>http://preaction.github.io/blog/2012/09/23/plan-software-to-live-forever.html</link>
            <guid>http://preaction.github.io/blog/2012/09/23/plan-software-to-live-forever.html</guid>
            <description><![CDATA[
                <p>How often have I told myself, "I'll kludge this now and rewrite it later"? And
how many times did I actually go back and rewrite that kludgy bit? "Too often"
and "not enough". Many job postings include the phrase "update legacy
applications," as a euphemism for "rewrite poorly-designed spaghetti." The Y2K
problem was a huge exercise in code out-living the developer's plan, with a
healthy dose of cargo-culting thrown in. Lately, I've been learning to plan for
a likely possibility: My code will survive to haunt my bug lists and my resume
for a long time.</p>

                    <ul>
                        <li><a href="http://blogs.perl.org/users/preaction/2012/09/plan-software-to-live-forever.html">
                            Continue reading <em>Chicago.PM - Beyond grep - Expanding the Programmer Toolset</em> on blogs.perl.org...
                        </a></li>
                        <li><a href="http://preaction.github.io/blog/2012/09/23/plan-software-to-live-forever.html#section-2">
                            Continue reading on preaction
                        </a></li>
                    </ul>
                <p>Tags:
                    <a href="/blog/tag/software">software</a>
                </p>
            ]]></description>
            <pubDate>
                Sat, 21 Jun 2014 01:15:00 +0000
            </pubDate>
        </item>
    </channel>
</rss>

